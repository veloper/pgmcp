"""switching_to_sti_elements

Revision ID: fc72dba4a6d7
Revises: c819a0605adb
Create Date: 2025-07-29 11:37:30.459438

"""
from typing import Sequence, Union

import sqlalchemy as sa

from pgvector.sqlalchemy import Vector
from sqlalchemy.dialects import postgresql

from alembic import op


# revision identifiers, used by Alembic.
revision: str = 'fc72dba4a6d7'
down_revision: Union[str, None] = 'c819a0605adb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('element',
    sa.Column('type', sa.String(), nullable=False, comment='Type of the element and discriminator for polymorphic behavior'),
    sa.Column('document_id', sa.Integer(), nullable=False, comment='Document that this element is a part of'),
    sa.Column('parent_id', sa.Integer(), nullable=True, comment='Parent element that this element is attached to'),
    sa.Column('content', sa.TEXT(), nullable=True, comment='Text content of the element and all of its children'),
    sa.Column('position', sa.Integer(), nullable=False, comment='position of the element among its siblings'),
    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='JSONB representation of attributes, free form.'),
    sa.Column('left', sa.Integer(), nullable=True, comment='Left boundary for tree structure, if applicable'),
    sa.Column('level', sa.Integer(), nullable=False, comment='Level in the tree structure, if applicable'),
    sa.Column('right', sa.Integer(), nullable=True, comment='Right boundary for tree structure, if applicable'),
    sa.Column('children_count', sa.Integer(), nullable=False, comment='counter cache for len(self.children)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('embedding', Vector(dim=1536), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['element.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_element_type'), 'element', ['type'], unique=False)
    op.execute('DROP TABLE listing_items CASCADE')
    op.execute('DROP TABLE sectionables CASCADE')
    op.execute('DROP TABLE table_rows CASCADE')
    op.execute('DROP TABLE paragraphs CASCADE')
    op.execute('DROP TABLE listings CASCADE')
    op.execute('DROP TABLE tables CASCADE')
    op.execute('DROP TABLE table_row_cells CASCADE')
    op.execute('DROP TABLE sections CASCADE')
    op.execute('DROP TABLE code_blocks CASCADE')
    op.execute('DROP TABLE sentences CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sentences',
    sa.Column('paragraph_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['paragraph_id'], ['paragraphs.id'], name=op.f('sentences_paragraph_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('sentences_pkey'))
    )
    op.create_table('code_blocks',
    sa.Column('language', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['sectionables.id'], name=op.f('code_blocks_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('code_blocks_pkey'))
    )
    op.create_table('sections',
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sections_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='sections_document_id_fkey'),
    sa.ForeignKeyConstraint(['id'], ['sectionables.id'], name='sections_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sections_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('table_row_cells',
    sa.Column('table_row_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cell_content', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['table_row_id'], ['table_rows.id'], name=op.f('table_row_cells_table_row_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('table_row_cells_pkey'))
    )
    op.create_table('tables',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tables_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['sectionables.id'], name='tables_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tables_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('listings',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('listings_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['sectionables.id'], name='listings_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='listings_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('paragraphs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['sectionables.id'], name=op.f('paragraphs_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('paragraphs_pkey'))
    )
    op.create_table('table_rows',
    sa.Column('table_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('row_content', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['table_id'], ['tables.id'], name=op.f('table_rows_table_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('table_rows_pkey'))
    )
    op.create_table('sectionables',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sectionables_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('section_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['section_id'], ['sections.id'], name='sectionables_section_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sectionables_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('listing_items',
    sa.Column('listing_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('listable_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('listable_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['listing_id'], ['listings.id'], name=op.f('listing_items_listing_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('listing_items_pkey'))
    )
    op.drop_index(op.f('ix_element_type'), table_name='element', cascade=True)
    op.drop_table('element', cascade=True)
    # ### end Alembic commands ###
