"""pluralize function

Revision ID: e76237f88175
Revises: 5290ae5b0a1c
Create Date: 2025-08-02 14:35:07.139346

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from pgvector.sqlalchemy import Vector


# revision identifiers, used by Alembic.
revision: str = 'e76237f88175'
down_revision: Union[str, None] = '5290ae5b0a1c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('uq_elements_type_document_id'), 'elements', type_='unique')
    op.create_unique_constraint('uq_element_type_document_id', 'elements', ['type', 'document_id'])
    op.execute("""CREATE OR REPLACE FUNCTION "rebuild_element_tree"() RETURNS void LANGUAGE plpgsql AS $$
    BEGIN
        -- Reset fields
        UPDATE elements
        SET "left" = NULL, "right" = NULL, level = 0, children_count = 0;

        -- Recursive CTE for left/right/level assignment
        WITH RECURSIVE tree AS (
            SELECT
                id,
                parent_id,
                1 AS lft,
                2 AS rgt,
                0 AS lvl
            FROM elements
            WHERE parent_id IS NULL
            UNION ALL
            SELECT
                e.id,
                e.parent_id,
                t.rgt,
                t.rgt + 1,
                t.lvl + 1
            FROM elements e
            JOIN tree t ON e.parent_id = t.id
        )
        UPDATE elements e
        SET "left"  = t.lft,
            "right" = t.rgt,
            level   = t.lvl
        FROM tree t
        WHERE e.id = t.id;

        -- Update children_count in bulk
        UPDATE elements e
        SET children_count = c.cnt
        FROM (
            SELECT parent_id, COUNT(*) AS cnt
            FROM elements
            WHERE parent_id IS NOT NULL
            GROUP BY parent_id
        ) c
        WHERE e.id = c.parent_id;

        -- Reassign position for all siblings, contiguous and deterministic
        WITH sibling_groups AS (
            SELECT
                id,
                parent_id,
                ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY id) - 1 AS new_position
            FROM elements
            WHERE parent_id IS NOT NULL
        )
        UPDATE elements e
        SET position = s.new_position
        FROM sibling_groups s
        WHERE e.id = s.id;
    END;
    $$;""")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("""CREATE OR REPLACE FUNCTION "rebuild_element_tree"() RETURNS void LANGUAGE plpgsql AS $$
    BEGIN
        -- Reset fields
        UPDATE element
        SET "left" = NULL, "right" = NULL, level = 0, children_count = 0;

        -- Recursive CTE for left/right/level assignment
        WITH RECURSIVE tree AS (
            SELECT
                id,
                parent_id,
                1 AS lft,
                2 AS rgt,
                0 AS lvl
            FROM element
            WHERE parent_id IS NULL
            UNION ALL
            SELECT
                e.id,
                e.parent_id,
                t.rgt,
                t.rgt + 1,
                t.lvl + 1
            FROM element e
            JOIN tree t ON e.parent_id = t.id
        )
        UPDATE element e
        SET "left"  = t.lft,
            "right" = t.rgt,
            level   = t.lvl
        FROM tree t
        WHERE e.id = t.id;

        -- Update children_count in bulk
        UPDATE element e
        SET children_count = c.cnt
        FROM (
            SELECT parent_id, COUNT(*) AS cnt
            FROM element
            WHERE parent_id IS NOT NULL
            GROUP BY parent_id
        ) c
        WHERE e.id = c.parent_id;

        -- Reassign position for all siblings, contiguous and deterministic
        WITH sibling_groups AS (
            SELECT
                id,
                parent_id,
                ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY id) - 1 AS new_position
            FROM element
            WHERE parent_id IS NOT NULL
        )
        UPDATE element e
        SET position = s.new_position
        FROM sibling_groups s
        WHERE e.id = s.id;
    END;
    $$;""")
    op.drop_constraint('uq_element_type_document_id', 'elements', type_='unique')
    op.create_unique_constraint(op.f('uq_elements_type_document_id'), 'elements', ['type', 'document_id'], postgresql_nulls_not_distinct=False)
    # ### end Alembic commands ###
