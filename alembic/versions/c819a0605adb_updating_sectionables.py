"""updating_sectionables

Revision ID: c819a0605adb
Revises: e25b67b8eb4b
Create Date: 2025-07-29 09:18:36.394746

"""
from typing import Sequence, Union

import sqlalchemy as sa

from pgvector.sqlalchemy import Vector
from sqlalchemy.dialects import postgresql

from alembic import op


# revision identifiers, used by Alembic.
revision: str = 'c819a0605adb'
down_revision: Union[str, None] = 'e25b67b8eb4b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sectionables',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('section_id', sa.Integer(), nullable=True),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['section_id'], ['sections.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute('DROP TABLE contents CASCADE')
    op.drop_table('section_items')
    op.add_column('answers', sa.Column('content', sa.TEXT(), nullable=True))
    # op.drop_constraint(op.f('answers_content_id_fkey'), 'answers', type_='foreignkey')  # Already dropped by CASCADE
    op.drop_column('answers', 'content_id')
    op.create_foreign_key(None, 'code_blocks', 'sectionables', ['id'], ['id'])
    op.drop_column('code_blocks', 'updated_at')
    op.drop_column('code_blocks', 'created_at')
    op.drop_column('code_blocks', 'content')
    op.create_foreign_key(None, 'listings', 'sectionables', ['id'], ['id'])
    op.drop_column('listings', 'updated_at')
    op.drop_column('listings', 'created_at')
    op.drop_column('listings', 'content')
    op.create_foreign_key(None, 'paragraphs', 'sectionables', ['id'], ['id'])
    op.drop_column('paragraphs', 'updated_at')
    op.drop_column('paragraphs', 'created_at')
    op.drop_column('paragraphs', 'content')
    op.create_foreign_key(None, 'sections', 'sectionables', ['id'], ['id'])
    op.drop_column('sections', 'updated_at')
    op.drop_column('sections', 'created_at')
    op.drop_column('sections', 'content')
    op.create_foreign_key(None, 'tables', 'sectionables', ['id'], ['id'])
    op.drop_column('tables', 'updated_at')
    op.drop_column('tables', 'position')
    op.drop_column('tables', 'created_at')
    op.drop_column('tables', 'content')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tables', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('tables', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('tables', sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tables', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'tables', type_='foreignkey')
    op.add_column('sections', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sections', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('sections', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'sections', type_='foreignkey')
    op.add_column('paragraphs', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('paragraphs', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('paragraphs', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'paragraphs', type_='foreignkey')
    op.add_column('listings', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('listings', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('listings', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'listings', type_='foreignkey')
    op.add_column('code_blocks', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('code_blocks', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('code_blocks', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'code_blocks', type_='foreignkey')
    op.add_column('answers', sa.Column('content_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('answers_content_id_fkey'), 'answers', 'contents', ['content_id'], ['id'])
    op.drop_column('answers', 'content')
    op.create_table('section_items',
    sa.Column('section_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sectionable_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sectionable_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['section_id'], ['sections.id'], name=op.f('section_items_section_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('section_items_pkey'))
    )
    op.create_table('contents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('contentable_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contentable_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('contents_pkey'))
    )
    op.drop_table('sectionables')
    # ### end Alembic commands ###
