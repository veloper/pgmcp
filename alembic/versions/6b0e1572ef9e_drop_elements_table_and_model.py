"""Drop elements table and model

Revision ID: 6b0e1572ef9e
Revises: b0957e0b777f
Create Date: 2025-08-05 05:39:46.060065

"""
from typing import Sequence, Union

import sqlalchemy as sa

from pgvector.sqlalchemy import Vector
from sqlalchemy.dialects import postgresql

from alembic import op


# revision identifiers, used by Alembic.
revision: str = '6b0e1572ef9e'
down_revision: Union[str, None] = 'b0957e0b777f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('document_chunks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('tokens', sa.String(), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tokens_count', sa.Integer(), nullable=False),
    sa.Column('embedding', Vector(dim=1536), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_document_chunks_document_id'), 'document_chunks', ['document_id'], unique=False)
    op.drop_index(op.f('idx_elements_document_id_type'), table_name='elements')
    op.drop_index(op.f('idx_elements_parent_id'), table_name='elements')
    op.drop_index(op.f('idx_elements_sibling_order'), table_name='elements')
    op.drop_index(op.f('ix_elements_type'), table_name='elements')
    op.drop_table('elements')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('elements',
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False, comment='Type of the element and discriminator for polymorphic behavior'),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Document that this element is a part of'),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Parent element that this element is attached to'),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True, comment='Text content of the element and all of its children'),
    sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=False, comment='position of the element among its siblings'),
    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False, comment='JSONB representation of attributes, free form.'),
    sa.Column('left', sa.INTEGER(), autoincrement=False, nullable=True, comment='Left boundary for tree structure, if applicable'),
    sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=False, comment='Level in the tree structure, if applicable'),
    sa.Column('right', sa.INTEGER(), autoincrement=False, nullable=True, comment='Right boundary for tree structure, if applicable'),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), autoincrement=False, nullable=True),
    sa.Column('descendants_count', sa.INTEGER(), autoincrement=False, nullable=False, comment='counter cache for total descendants (children + grandchildren + etc)'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name=op.f('element_document_id_fkey')),
    sa.ForeignKeyConstraint(['parent_id'], ['elements.id'], name=op.f('elements_parent_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('element_pkey'))
    )
    op.create_index(op.f('ix_elements_type'), 'elements', ['type'], unique=False)
    op.create_index(op.f('idx_elements_sibling_order'), 'elements', ['parent_id', 'id'], unique=False)
    op.create_index(op.f('idx_elements_parent_id'), 'elements', ['parent_id'], unique=False)
    op.create_index(op.f('idx_elements_document_id_type'), 'elements', ['document_id', 'type'], unique=False)
    op.drop_index(op.f('ix_document_chunks_document_id'), table_name='document_chunks')
    op.drop_table('document_chunks')
    # ### end Alembic commands ###
