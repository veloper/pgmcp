from __future__ import annotations

from typing import TYPE_CHECKING, List

from pgvector.sqlalchemy import Vector
from sqlalchemy.orm import Mapped, mapped_column, relationship

from pgmcp.models.base import Base
from pgmcp.models.mixin import IsContentableMixin


if TYPE_CHECKING:
    from pgmcp.models.answer import Answer

class Question(Base):
    """
    Represents a question generated by an LLM about a specific piece of content.

    The question text is embedded to support similarity search, aligning user queries with relevant content.
    This follows a T5-style approach: extract self-contained answers from content, then generate questions that would naturally elicit those answers.
    """
    
    
    # == Model Metadata =======================================================
    __tablename__ = "questions"

    # == Columns ============================================================== 
    embedding  : Mapped[Vector | None] = mapped_column(Vector(1536), nullable=True) # 1536 for OpenAI's text-embedding-3-sm
    text       : Mapped[str]           = mapped_column(nullable=False)

    # == Relationships ========================================================
    """Answer contains the derived answers to the derived question."""
    answers : Mapped[List["Answer"]] = relationship( "Answer", back_populates="question", cascade="all, delete-orphan" )

    # == Methods ==============================================================
